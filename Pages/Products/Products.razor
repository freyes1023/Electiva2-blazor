@page "/product"
@inject ILogger<Products> logger;
@inject IProductService ProductService;
@inject ICategoryService categoryService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<PageTitle>Products</PageTitle>

<!-- <SurveyPrompt title="Products" /> !-->
<ModuleTitle Title="Products" />


<button class="btn btn-dark mb-4" @onclick="@(()=> NavigationManager.NavigateTo("/addproduct"))"> 
 <span class="oi oi-plus"></span> Add Product
 </button>

@code
{
    private List<Product> products;
    
    protected override async Task OnInitializedAsync()
    {
       // products = await GetProducts();
       await GetProducts();
    }
    //private async Task<List<Product>> GetProducts()
    private async Task GetProducts()
    {
       products = await ProductService.Get();  
    }
    private async Task DeleteProduct(Product product)
    {
        if(!await JSRuntime.InvokeAsync<bool>("confirm",$"Are you sure, You want to remove {product.Title}"))
            return;
        await ProductService.Delete(product.Id); 
        // toastService.ShowSuccess("Producto Eliminado"); 
        await GetProducts();
    }
}
@if(products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class = "card">
                <img class = "car-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" />
                <div class="card-body">
                    <h4><b>@product.Title</b></h4> 
                    <p>@product.Price?.ToString()</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))">
                        <span class="oi oi-trash"></span></button>
                </div> 
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar</p>
}